name: Update Images JSON

on:
  push:
    branches:
      - main  # Change to your default branch if needed
      - test-image

jobs:
  update-json:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Get Image List and Update JSON
        run: |
          REPO="iotapi/iotapi.github.io"
          FOLDER="pictures"
          OUTPUT_FILE="pictures/images.json"

          # GitHub Token from secrets
          GITHUB_TOKEN=${{ secrets.GH_PAT }}

          # Fetch image files from GitHub API with authentication
          RESPONSE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/$REPO/contents/$FOLDER")
          
          # Initialize an empty JSON array to store image data
          IMAGE_LIST="[]"

          # Loop through the files and fetch commit data for each one
          for row in $(echo "$RESPONSE" | jq -r '.[] | select(.name | test("\\.(jpe?g|png|gif)$"; "i")) | @base64'); do
            # Decode the row from base64
            _jq() {
              echo ${row} | base64 --decode | jq -r ${1}
            }

            # Extract file name and download URL
            file_name=$(_jq '.name')
            file_url=$(_jq '.download_url')

            # Fetch commit data to get the updated_at (last modified) date
            COMMIT_RESPONSE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/$REPO/commits?path=$FOLDER/$file_name")
            
            # Extract the last commit date for the file
            last_commit_date=$(echo "$COMMIT_RESPONSE" | jq -r '.[0].commit.committer.date')

            # If no date is found, fallback to a placeholder value
            if [ "$last_commit_date" == "null" ]; then
              last_commit_date="Unknown"
            fi

            # Append the image data with the modified date
            IMAGE_LIST=$(echo "$IMAGE_LIST" | jq --arg name "$file_name" --arg url "$file_url" --arg timestamp "$last_commit_date" \
            '. += [{"name": $name, "url": $url, "timestamp": $timestamp}]')
          done

          # Save to JSON
          echo "$IMAGE_LIST" > "$OUTPUT_FILE"

      - name: Commit and Push Changes
        env:
            GITHUB_TOKEN: ${{ secrets.GH_PAT }}  # Use the stored token
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git
          git add pictures/images.json
          git commit -m "Auto-update images.json" || echo "No changes to commit"
          git push
